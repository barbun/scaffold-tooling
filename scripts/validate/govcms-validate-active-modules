#!/usr/bin/env bash
set -euo pipefail

#
# GovCMS mandatory module validation.
#
# Ensure requirde platform modules are enabled.
#

GOVCMS_PREPARE_XML_SCRIPT=${GOVCMS_PREPARE_XML_SCRIPT:-govcms-prepare-xml}
GOVCMS_OUTFILE=${GOVCMS_OUTFILE:-govcms-validate-active-permissions}
GOVCMS_REMEDIATE=${GOVCMS_REMEDIATE:-""}

# Drush 12 support.
DRUSH="${GOVCMS_DRUSH:-none}"
if [ "$DRUSH" == "none" ]; then
  DRUSH=$(which /app/vendor/bin/drush > /dev/null 2>&1 && echo "/app/vendor/bin/drush" || echo "/usr/local/bin/drush")
fi

AV=$([ -z "${HTTPAV_ENDPOINT:-}" ] && echo "clamav" || echo "httpav")

GOVCMS_REQUIRED_MODULES=(
  "$AV"
  govcms_security
  lagoon_logs
  tfa
)

GOVCMS_DISALLOWED_MODULES=(
  dblog
  module_permissions_ui
  statistics
  update
)

FAILURES=""
TOTAL=0

echo "GovCMS Validate :: Active modules validation"

MODULE_LIST=$("$DRUSH" pm:list --status=enabled --format=json)

# Check if required modules are enabled
for module in "${GOVCMS_REQUIRED_MODULES[@]}"; do
  (( TOTAL=TOTAL+1 ))
  if [[ 'null' == $(jq -r ".$module" <<< "${MODULE_LIST}") ]]; then
    if [ -n "${GOVCMS_REMEDIATE}" ]; then
      "$DRUSH" pm:enable "$module" -y
    else
      echo "[fail]: '$module' is not enabled";
      FAILURES="$FAILURES,disabled:$module"
    fi
  fi
done

# Check if disallowed modules are disabled
for module in "${GOVCMS_DISALLOWED_MODULES[@]}"; do
  (( TOTAL=TOTAL+1 ))
  if [[ 'null' != $(jq -r ".$module" <<< "${MODULE_LIST}") ]]; then
    if [ -n "${GOVCMS_REMEDIATE}" ]; then
      "$DRUSH" pm:disable "$module" -y
    else
      echo "[fail]: '$module' is enabled";
      FAILURES="$FAILURES,enabled:$module"
    fi
  fi
done

if [ -x "${GOVCMS_PREPARE_XML_SCRIPT}" ]; then
  ${GOVCMS_PREPARE_XML_SCRIPT} --failures="${FAILURES}" --total="${TOTAL}" --name="${GOVCMS_OUTFILE}" --fail-message="GovCMS.QA.ModuleValidation"
fi

if [ -z "${FAILURES}" ]; then
  echo "[success]: All modules are in expected states"
  exit 0
fi

echo "[fail]: Modules are in invalid states"
exit 1
